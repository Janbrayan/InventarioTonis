/* index.css */

body {
  margin: 0;
  font-family: 'Roboto', Arial, sans-serif;
  background: linear-gradient(135deg, #0f2027, #2c5364); /* Fondo general */
  overflow: hidden;
  color: #f8fafc;
}

html, body, #root {
  height: 100%;
}

button {
  font-family: inherit;
}

input, textarea {
  font-family: inherit;
  color: #f8fafc;
}
/* Transición fade para react-transition-group */
/* Aparece por primera vez (si usas appear) */
/* Para appear (primera vez) */
.fade-appear {
  opacity: 0;
}
.fade-appear.fade-appear-active {
  opacity: 1;
  transition: opacity 1000ms ease-in-out;
}

/* Cuando entra una ruta nueva */
.fade-enter {
  opacity: 0;
}
.fade-enter.fade-enter-active {
  opacity: 1;
  transition: opacity 1000ms ease-in-out;
}

/* Cuando sale la ruta actual */
.fade-exit {
  opacity: 1;
}
.fade-exit.fade-exit-active {
  opacity: 0;
  transition: opacity 1000ms ease-in-out;
}



/* Puedes añadir aquí tus clases login-container, background, etc.
   o las tienes en archivos CSS separados. Ejemplo rápido: */
/* === Agrega esto al final de tu App.css === */

/* Definición de la animación de "fade-in" */
@keyframes fadeInStartup {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* Aplica la animación a la clase principal de tu login */
.login-container {
  /* Mantén tus estilos actuales y agrega la animación: */
  animation: fadeInStartup 1s ease-in-out forwards;
}
input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
